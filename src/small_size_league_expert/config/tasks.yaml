language_detection_decomposition_task:
  description: >
    Important step to decompose the question into sub-questions.
    These will make it easier to retrieve the content related to the question "{question}" and then answer the question.
  expected_output: >
    1. The detected language code from the question.
    2. A small list of detailed, SSL-related sub-questions.
    
    <INSTRUCTIONS>
    - These sub-questions will be used to retrieve the content related to the question.
    - These sub-questions must be strictly related to the question and must be in the English language.
    - Provide a small list of sub-questions, only 3-5 is enough.
    - You must deeply analyze the question to understand the main topic and then decompose it into sub-questions.
    - These sub-questions can also help to enrich the context, bringing content related to the question.
    - If the user refers to "category", "competition", "league" or things like that, you should always consider that is about the RoboCup Small Size League (SSL).
  agent: language_decomposer

retrieval_task:
  description: >
    Search all available tools and sources (Wikipedia, MCP, etc.) for content relevant to the sub-questions.
    Should call each tool separately and return the results.
  expected_output: >
    A collection of relevant content snippets and their sources for each sub-question.

    <INSTRUCTIONS>
    - Wikipedia should be mainly used to enrich some concepts that cannot be correctly retrieved from the MCP tools (e.g. "What is High Frequency Communication?", "What is Protobuf ?")
    - The MCP tools should be used to retrieve the most relevant content related to the question and sub-questions.
    - You should call one tool per time, but you can call the same tool multiple times to retrieve more content.
    - If none content is retrieved, you should return an empty list.

  agent: retriever

ranking_task:
  description: >
    Rank in order of importance and filter the retrieved content for usefulness and accuracy based on the question {question}
  expected_output: >
    A ranked and filtered list of the most useful and accurate content snippets, with source links.
  agent: ranker

answer_generation_task:
  description: >
    Based on the ranked list of content, generate a concise, correct, and well-formatted Markdown answer for Discord.
  expected_output: >
    A Markdown-formatted answer suitable for Discord, concise and correct, and within Discord's message size limits.
    
    
    <INSTRUCTIONS>
    - If there are multiple statements in the answer, they should be separated by a new line character for Discord formatting.
    - It's cool to add some emojis to the answer to make it more engaging.
    - If none retrieved content is available, you should return a message saying that no content was found.
    - All the statements in the phrases must refer to a retrieved knowledge and must provide the original source of the knowledge.
      - Every text where reference to a source is made, should be correctly formatted as "[statement](link)".
      - The reference for the original source should be the link to the original source.
      - The reference must be inserted correctly during the citation, not at the end of the answer.
      - The reference must be present both on the English text and on the original source text. If the source was translated, the reference must contain the word (translated) at the end - e.g. "Essa é a citação em Português (traduzido)".
    - All final answers must:
      - Be in the same language as the question {question}.
      - Have the question at the start of the answer (e.g: "Based on the question `{question}`, we have the following answer:") 
      - Have the answer correctly formatted and carrying the functional links to original sources.
      - Have a disclaimer at the end of the answer: "Please, remember that this answer is based on the content available in the tools and sources, generated by an AI agent, and it may not be 100% accurate. Verify all the information and sources before using it."
  agent: answer_generator
